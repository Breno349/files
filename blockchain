import hashlib
import datetime as date

class EventLine:
    def __init__(self, ltype, info):
        self.ltype = ltype
        self.info  = info
        self.data  = self.pack()
    def pack(self):
        if self.ltype == 'recv':
            

class Block:
    def __init__(self, index, timestep, data=[], prev_hash):
        self.index = index
        self.timestep = timestep
        self.data = data
        self.prev_hash = prev_hash
        self.hash = self.calculate_hash()
    def packdata(self, data):
        return '\n'.join( data )
    def calculate_hash(self):
        sha = hashlib.sha256(
            str(self.index).encode('utf-8')               +
            str(self.timestep).encode('utf-8')            +
            str(self.packdata(self.data)).encode('utf-8') +
            str(self.prev_hash).encode('utf-8')
        )
        return sha.hexdigest()

class BlockChain:
    def __init__(self):
        self.chain = [ self.create_first_block() ]
    def create_first_block(self):
        return Block( 0, date.datetime.now(), [], '0' )
    def add_block(self, new_block):
        new_block.prev_hash = self.chain[-1].hash
        new_block.hash = new_block.calculate_hash()
        self.chain.append( new_block )
    def is_valid(self):
        for i in range(1, len(self.chain)):
            curr_block = self.chain[i]
            prev_block = self.chain[i-1]
            
            if curr_block.hash != curr_block.calculate_hash():
                return False
            if curr_block.prev_hash != prev_block.hash:
                return False
        return True


blockchain = BlockChain()











